{
  "name": "avalanche-icm-dashboard",
  "description": "Complete Avalanche Inter-Chain Messaging Dashboard",
  "version": "1.0.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/username/avalanche-icm-dashboard.git"
  },
  "keywords": ["avalanche", "icm", "teleporter", "cross-chain", "blockchain", "defi"],
  "author": "Unite DeFi",
  "license": "MIT",
  "files": [
    {
      "path": "README.md",
      "content": "# 🏔️ Avalanche ICM Dashboard\n\nA complete, production-ready Inter-Chain Messaging dashboard for Avalanche subnets. Send cross-chain messages between Avalanche L1 subnets with real-time monitoring and analytics.\n\n## ✨ Features\n\n- 🚀 **Cross-Chain Messaging**: Send messages between Avalanche subnets using Teleporter\n- 📊 **Real-time Analytics**: Live transaction monitoring and subnet usage statistics\n- 🔗 **Multi-Subnet Support**: Dexalot, DeFi Kingdoms, Amplify, and custom subnets\n- 💼 **Wallet Integration**: MetaMask with automatic Fuji testnet switching\n- 📋 **Transaction History**: Complete message history with export functionality\n- 🎯 **Production Ready**: Docker deployment, API documentation, testing\n\n## 🌐 Supported Networks\n\n- **Avalanche Fuji Testnet**: Development and testing\n- **Avalanche Mainnet**: Production deployment\n- **L1 Subnets**: All Avalanche subnets with ICM support\n\n## 🛠️ Quick Start\n\n### Prerequisites\n\n- Node.js 18+\n- MetaMask wallet\n- Avalanche testnet AVAX (faucet: https://faucet.avax-test.network/)\n\n### Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/avalanche-icm-dashboard.git\ncd avalanche-icm-dashboard\n\n# Install dependencies\nnpm install\n\n# Copy environment variables\ncp .env.example .env\n\n# Start development server\nnpm run dev\n```\n\n### Environment Setup\n\n```env\n# Avalanche Configuration\nAVALANCHE_FUJI_RPC_URL=https://api.avax-test.network/ext/bc/C/rpc\nTELEPORTER_CONTRACT_ADDRESS=0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf\n\n# Subnet Blockchain IDs\nAVAX_BLOCKCHAIN_ID_DEXALOT=0x2VCAhX6vE3UnXC6s1CBPE6jJ4c4cHWMfPgCptuWS59pQ8WYxXw\nAVAX_BLOCKCHAIN_ID_DFK=0x2rwhRKN8qfxK9AEJunfUjn5WH7PQzUPPQKCb59ak6fwsrwF2R\nAVAX_BLOCKCHAIN_ID_AMPLIFY=0xzJytnh96Pc8rM337bBrtMvJDbEdDNjcXiG3WkTNCiLp8krJUk\n```\n\n## 📖 Usage\n\n### 1. Connect Wallet\n\nClick the **\"Connect Wallet\"** button to connect your MetaMask wallet. The dashboard will automatically switch to Avalanche Fuji testnet.\n\n### 2. Send ICM Message\n\n1. Select a **destination subnet** from the dropdown (Dexalot, DeFi Kingdoms, Amplify, or Custom)\n2. Enter the **recipient address**\n3. Write your **message content**\n4. Click **\"Send ICM Message\"**\n5. Approve the transaction in MetaMask\n\n### 3. Monitor Transactions\n\n- View **transaction history** in the History tab\n- Track **real-time status** updates\n- Export transaction data as CSV\n- View **analytics and statistics**\n\n## 🏗️ Architecture\n\n```\navalanche-icm-dashboard/\n├── frontend/                 # Next.js React application\n│   ├── src/\n│   │   ├── components/      # React components\n│   │   │   ├── ICMDashboard.tsx\n│   │   │   ├── ICMSendForm.tsx\n│   │   │   ├── ICMHistory.tsx\n│   │   │   └── ICMAnalytics.tsx\n│   │   ├── hooks/          # Custom React hooks\n│   │   │   ├── useICM.ts\n│   │   │   └── useWallet.ts\n│   │   └── pages/          # Next.js pages\n│   │       ├── index.tsx\n│   │       └── _app.tsx\n│   └── package.json\n├── backend/                 # Express.js API server\n│   ├── src/\n│   │   ├── routes/         # API endpoints\n│   │   │   └── icm.ts\n│   │   └── services/       # Business logic\n│   │       └── teleporter.ts\n│   └── package.json\n├── docker/                  # Docker configuration\n│   ├── Dockerfile.frontend\n│   ├── Dockerfile.backend\n│   └── nginx.conf\n├── docker-compose.yml       # Local development\n├── docker-compose.prod.yml # Production deployment\n├── docs/                    # Documentation\n│   ├── API.md\n│   ├── deployment.md\n│   └── user-guide.md\n├── scripts/                 # Utility scripts\n│   ├── deploy.sh\n│   └── setup.sh\n└── tests/                   # Test suites\n    ├── integration/\n    ├── e2e/\n    └── unit/\n```\n\n## 🔌 API Endpoints\n\n### ICM Endpoints\n\n- `GET /api/icm/presets` - Get available subnet presets\n- `POST /api/icm/send` - Send ICM message\n- `GET /api/icm/status/:messageId` - Get message status\n- `GET /api/icm/history` - Get transaction history\n\n### Example API Usage\n\n```javascript\n// Send ICM message\nconst response = await fetch('/api/icm/send', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    sourceChain: 'C',\n    destinationPreset: 'dexalot',\n    recipient: '0x742d35Cc6634C0532925a3b8D427b2C0ef46c',\n    amount: 'Hello from Avalanche ICM!',\n    walletAddress: '0xYourWalletAddress'\n  })\n});\n\nconst result = await response.json();\nconsole.log('Transaction Hash:', result.txHash);\n```\n\n## 🚀 Deployment\n\n### Docker Deployment (Recommended)\n\n```bash\n# Build and run with Docker Compose\ndocker-compose up --build\n\n# Access at http://localhost:3000\n```\n\n### Manual Deployment\n\n```bash\n# Frontend\ncd frontend && npm run build && npm start\n\n# Backend\ncd backend && npm run build && npm start\n```\n\n### Cloud Deployment\n\n#### Vercel (Frontend)\n```bash\nnpm i -g vercel\nvercel --prod\n```\n\n#### Railway (Backend)\n```bash\ngit push railway main\n```\n\n#### AWS/GCP/Azure\nUse the provided Docker containers for cloud deployment.\n\n## 🔧 Development\n\n### Local Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Start development servers\nnpm run dev\n\n# Run tests\nnpm test\n\n# Build for production\nnpm run build\n```\n\n### Environment Variables\n\n```env\n# Development\nNODE_ENV=development\nPORT=3001\n\n# Avalanche Configuration\nAVALANCHE_FUJI_RPC_URL=https://api.avax-test.network/ext/bc/C/rpc\nTELEPORTER_CONTRACT_ADDRESS=0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf\n\n# Optional: Database\nDATABASE_URL=postgresql://localhost:5432/icm_dashboard\n\n# Optional: Analytics\nANALYTICS_KEY=your_analytics_key\n```\n\n## 📊 Analytics & Monitoring\n\n### Transaction Analytics\n\n- **Message Volume**: Track total messages sent\n- **Success Rate**: Monitor transaction success rates\n- **Subnet Usage**: Analyze which subnets are most used\n- **Response Times**: Monitor API response times\n\n### Real-time Monitoring\n\n- **Live Updates**: WebSocket connections for real-time status\n- **Error Tracking**: Comprehensive error logging and reporting\n- **Performance Metrics**: Response times and throughput\n- **Health Checks**: System health and uptime monitoring\n\n## 🧪 Testing\n\n### Unit Tests\n```bash\nnpm run test:unit\n```\n\n### Integration Tests\n```bash\nnpm run test:integration\n```\n\n### E2E Tests\n```bash\nnpm run test:e2e\n```\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- [Avalanche](https://avalancheavax.com/) for the ICM protocol\n- [Teleporter](https://docs.avax.network/build/cross-chain/teleporter) for cross-chain messaging\n- [MetaMask](https://metamask.io/) for wallet integration\n\n## 📞 Support\n\nFor support and questions:\n\n- 📧 Email: support@unitedefi.com\n- 💬 Discord: [Join our community](https://discord.gg/unitedefi)\n- 📖 Documentation: [docs.unitedefi.com](https://docs.unitedefi.com)\n\n---\n\n**Built with ❤️ by Unite DeFi**"
    },
    {
      "path": "package.json",
      "content": "{\n  \"name\": \"avalanche-icm-dashboard\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Complete Avalanche Inter-Chain Messaging Dashboard\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"dev\": \"concurrently \\\"cd frontend && npm run dev\\\" \\\"cd backend && npm run dev\\\"\",\n    \"build\": \"cd frontend && npm run build && cd ../backend && npm run build\",\n    \"start\": \"concurrently \\\"cd frontend && npm start\\\" \\\"cd backend && npm start\\\"\",\n    \"test\": \"npm run test:unit && npm run test:integration\",\n    \"test:unit\": \"cd frontend && npm run test && cd ../backend && npm run test\",\n    \"test:integration\": \"jest --config jest.integration.config.js\",\n    \"test:e2e\": \"cypress run\",\n    \"docker:build\": \"docker-compose build\",\n    \"docker:up\": \"docker-compose up\",\n    \"docker:down\": \"docker-compose down\",\n    \"deploy\": \"./scripts/deploy.sh\"\n  },\n  \"keywords\": [\n    \"avalanche\",\n    \"icm\",\n    \"teleporter\",\n    \"cross-chain\",\n    \"blockchain\",\n    \"defi\",\n    \"dashboard\"\n  ],\n  \"author\": \"Unite DeFi\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"concurrently\": \"^7.6.0\",\n    \"jest\": \"^29.5.0\",\n    \"cypress\": \"^12.8.1\"\n  },\n  \"engines\": {\n    \"node\": \">=18.0.0\",\n    \"npm\": \">=8.0.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/username/avalanche-icm-dashboard.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/username/avalanche-icm-dashboard/issues\"\n  },\n  \"homepage\": \"https://avalanche-icm-dashboard.vercel.app\"\n}"
    },
    {
      "path": "docker-compose.yml",
      "content": "version: '3.8'\n\nservices:\n  frontend:\n    build:\n      context: ./frontend\n      dockerfile: ../docker/Dockerfile.frontend\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NEXT_PUBLIC_BACKEND_URL=http://backend:3001\n      - NEXT_PUBLIC_ENVIRONMENT=development\n    depends_on:\n      - backend\n    volumes:\n      - ./frontend:/app\n      - /app/node_modules\n      - /app/.next\n\n  backend:\n    build:\n      context: ./backend\n      dockerfile: ../docker/Dockerfile.backend\n    ports:\n      - \"3001:3001\"\n    environment:\n      - NODE_ENV=development\n      - PORT=3001\n      - AVALANCHE_FUJI_RPC_URL=https://api.avax-test.network/ext/bc/C/rpc\n      - TELEPORTER_CONTRACT_ADDRESS=0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf\n    volumes:\n      - ./backend:/app\n      - /app/node_modules\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./docker/nginx.conf:/etc/nginx/nginx.conf\n    depends_on:\n      - frontend\n    profiles:\n      - production\n\nvolumes:\n  postgres_data:\n    driver: local\n\nnetworks:\n  default:\n    name: icm-dashboard-network"
    },
    {
      "path": "docker-compose.prod.yml",
      "content": "version: '3.8'\n\nservices:\n  frontend:\n    build:\n      context: ./frontend\n      dockerfile: ../docker/Dockerfile.frontend\n      target: production\n    environment:\n      - NEXT_PUBLIC_BACKEND_URL=https://api.yourdomain.com\n      - NEXT_PUBLIC_ENVIRONMENT=production\n    restart: unless-stopped\n\n  backend:\n    build:\n      context: ./backend\n      dockerfile: ../docker/Dockerfile.backend\n      target: production\n    environment:\n      - NODE_ENV=production\n      - PORT=3001\n      - AVALANCHE_RPC_URL=https://api.avax.network/ext/bc/C/rpc\n      - TELEPORTER_CONTRACT_ADDRESS=0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf\n      - DATABASE_URL=${DATABASE_URL}\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./docker/nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/ssl/certs\n    depends_on:\n      - frontend\n      - backend\n    restart: unless-stopped\n\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      - POSTGRES_DB=icm_dashboard\n      - POSTGRES_USER=icm_user\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n\nnetworks:\n  default:\n    name: icm-dashboard-prod-network"
    },
    {
      "path": ".env.example",
      "content": "# Avalanche ICM Dashboard Environment Configuration\n\n# =============================================================================\n# AVALANCHE NETWORK CONFIGURATION\n# =============================================================================\n\n# Avalanche Fuji Testnet (Development)\nAVALANCHE_FUJI_RPC_URL=https://api.avax-test.network/ext/bc/C/rpc\nTELEPORTER_CONTRACT_ADDRESS=0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf\n\n# Avalanche Mainnet (Production)\n# AVALANCHE_RPC_URL=https://api.avax.network/ext/bc/C/rpc\n# TELEPORTER_CONTRACT_ADDRESS=0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf\n\n# =============================================================================\n# SUBNET BLOCKCHAIN IDS\n# =============================================================================\n\n# Pre-configured Avalanche L1 subnets\nAVAX_BLOCKCHAIN_ID_DEXALOT=0x2VCAhX6vE3UnXC6s1CBPE6jJ4c4cHWMfPgCptuWS59pQ8WYxXw\nAVAX_BLOCKCHAIN_ID_DFK=0x2rwhRKN8qfxK9AEJunfUjn5WH7PQzUPPQKCb59ak6fwsrwF2R\nAVAX_BLOCKCHAIN_ID_AMPLIFY=0xzJytnh96Pc8rM337bBrtMvJDbEdDNjcXiG3WkTNCiLp8krJUk\n\n# =============================================================================\n# APPLICATION CONFIGURATION\n# =============================================================================\n\n# Environment\nNODE_ENV=development\nPORT=3001\n\n# Frontend URLs\nNEXT_PUBLIC_BACKEND_URL=http://localhost:3001\nNEXT_PUBLIC_ENVIRONMENT=development\n\n# =============================================================================\n# OPTIONAL: DATABASE (for production)\n# =============================================================================\n\n# PostgreSQL Database URL\n# DATABASE_URL=postgresql://username:password@localhost:5432/icm_dashboard\n\n# =============================================================================\n# OPTIONAL: ANALYTICS & MONITORING\n# =============================================================================\n\n# Google Analytics\n# NEXT_PUBLIC_GA_ID=G-XXXXXXXXXX\n\n# Mixpanel\n# NEXT_PUBLIC_MIXPANEL_TOKEN=your_mixpanel_token\n\n# =============================================================================\n# OPTIONAL: EXTERNAL APIs\n# =============================================================================\n\n# Avalanche Explorer API (for enhanced transaction data)\n# AVALANCHE_EXPLORER_API_KEY=your_explorer_api_key\n\n# =============================================================================\n# DEVELOPMENT SETTINGS\n# =============================================================================\n\n# Enable debug logging\nDEBUG=true\n\n# Enable testnet features\nENABLE_TESTNET=true\n\n# Development wallet addresses (for testing)\n# DEV_WALLET_ADDRESS=0x742d35Cc6634C0532925a3b8D427b2C0ef46c\n\n# =============================================================================\n# SECURITY SETTINGS\n# =============================================================================\n\n# JWT Secret (generate a strong random string)\n# JWT_SECRET=your_super_secret_jwt_key_here\n\n# API Rate Limiting\nRATE_LIMIT_WINDOW=15\nRATE_LIMIT_MAX_REQUESTS=100\n\n# CORS Settings\nCORS_ORIGIN=http://localhost:3000\n\n# =============================================================================\n# PRODUCTION DEPLOYMENT\n# =============================================================================\n\n# Database Password (for production)\n# DB_PASSWORD=your_secure_database_password\n\n# SSL Certificates (for HTTPS)\n# SSL_CERT_PATH=/path/to/ssl/cert.pem\n# SSL_KEY_PATH=/path/to/ssl/private.key\n\n# Domain Configuration\n# DOMAIN=https://your-icm-dashboard.com\n# API_DOMAIN=https://api.your-icm-dashboard.com"
    },
    {
      "path": "vercel.json",
      "content": "{\n  \"version\": 2,\n  \"name\": \"avalanche-icm-dashboard\",\n  \"builds\": [\n    {\n      \"src\": \"frontend/package.json\",\n      \"use\": \"@vercel/next\"\n    }\n  ],\n  \"routes\": [\n    {\n      \"src\": \"/api/(.*)\",\n      \"dest\": \"backend/src/index.ts\"\n    },\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"frontend/$1\"\n    }\n  ],\n  \"env\": {\n    \"NEXT_PUBLIC_BACKEND_URL\": \"@backend_url\",\n    \"AVALANCHE_FUJI_RPC_URL\": \"@avalanche_rpc_url\",\n    \"TELEPORTER_CONTRACT_ADDRESS\": \"@teleporter_contract\"\n  },\n  \"functions\": {\n    \"backend/src/**/*.ts\": {\n      \"runtime\": \"nodejs18.x\"\n    }\n  }\n}"
    },
    {
      "path": ".gitignore",
      "content": "# Dependencies\nnode_modules/\n.pnp\n.pnp.js\n\n# Testing\ncoverage/\n.nyc_output\n\n# Next.js\n.next/\nout/\n\n# Production\nbuild/\ndist/\n\n# Environment variables\n.env\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\n# Debug logs\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage/\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage\n.grunt\n\n# Bower dependency directory\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons\nbuild/Release\n\n# Dependency directories\njspm_packages/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# parcel-bundler cache\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\n\n# Nuxt.js build / generate output\ndist\n\n# Gatsby files\ngatsby-files/\n\n# Vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\ndynamodb-local/\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# Database files\n*.db\n*.sqlite\n*.sqlite3\n\n# Logs\nlogs/\n*.log\n\n# OS generated files\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nei.info\n\n# IDE files\n.vscode/\n.idea/\n*.swp\n*.swo\n*~\n\n# Temporary files\ntmp/\ntemp/\n\n# Docker volumes\npostgres_data/\n\n# SSL certificates\nssl/\n\n# Backup files\n*.bak\n*.backup"
    },
    {
      "path": "LICENSE",
      "content": "MIT License\n\nCopyright (c) 2024 Unite DeFi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
    },
    {
      "path": ".dockerignore",
      "content": "node_modules\nnpm-debug.log\n.next\n.git\n.gitignore\nREADME.md\n.env\n.nyc_output\ncoverage\n.vscode\n.idea\n*.log\n.DS_Store\n*.swp\n*.swo\n*~\n.dockerignore"
    }
  ],
  "frontend": {
    "package.json": "{\n  \"name\": \"avalanche-icm-dashboard-frontend\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\"\n  },\n  \"dependencies\": {\n    \"next\": \"14.0.4\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"ethers\": \"^6.8.1\",\n    \"@headlessui/react\": \"^1.7.17\",\n    \"@heroicons/react\": \"^2.0.18\",\n    \"tailwindcss\": \"^3.3.6\",\n    \"autoprefixer\": \"^10.4.16\",\n    \"postcss\": \"^8.4.31\",\n    \"lucide-react\": \"^0.294.0\",\n    \"react-hot-toast\": \"^2.4.1\",\n    \"socket.io-client\": \"^4.7.4\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.9.0\",\n    \"@types/react\": \"^18.2.37\",\n    \"@types/react-dom\": \"^18.2.15\",\n    \"typescript\": \"^5.2.2\",\n    \"eslint\": \"^8.53.0\",\n    \"eslint-config-next\": \"14.0.4\",\n    \"jest\": \"^29.7.0\",\n    \"@testing-library/react\": \"^14.1.2\",\n    \"@testing-library/jest-dom\": \"^6.1.4\",\n    \"@testing-library/user-event\": \"^14.5.1\"\n  }\n}",
    "next.config.js": "const nextConfig = {\n  reactStrictMode: true,\n  swcMinify: true,\n  env: {\n    NEXT_PUBLIC_BACKEND_URL: process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:3001',\n    NEXT_PUBLIC_ENVIRONMENT: process.env.NEXT_PUBLIC_ENVIRONMENT || 'development',\n  },\n  async rewrites() {\n    return [\n      {\n        source: '/api/:path*',\n        destination: `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/:path*`,\n      },\n    ]\n  },\n}\n\nmodule.exports = nextConfig",
    "tailwind.config.js": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx}',\n    './src/components/**/*.{js,ts,jsx,tsx}',\n    './src/app/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        avalanche: {\n          blue: '#E84142',\n          red: '#FF6B35',\n          yellow: '#F7931A',\n          green: '#28a745',\n          purple: '#6f42c1',\n        },\n      },\n      animation: {\n        'fade-in': 'fadeIn 0.5s ease-in-out',\n        'slide-in': 'slideIn 0.3s ease-out',\n      },\n      keyframes: {\n        fadeIn: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n        slideIn: {\n          '0%': { transform: 'translateX(-100%)' },\n          '100%': { transform: 'translateX(0)' },\n        },\n      },\n    },\n  },\n  plugins: [],\n}"
  },
  "backend": {
    "package.json": "{\n  \"name\": \"avalanche-icm-dashboard-backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Backend API for Avalanche ICM Dashboard\",\n  \"main\": \"dist/index.js\",\n  \"scripts\": {\n    \"dev\": \"tsx watch src/index.ts\",\n    \"build\": \"tsc\",\n    \"start\": \"node dist/index.js\",\n    \"test\": \"jest\",\n    \"lint\": \"eslint src/**/*.ts\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"cors\": \"^2.8.5\",\n    \"helmet\": \"^7.1.0\",\n    \"dotenv\": \"^16.3.1\",\n    \"ethers\": \"^6.8.1\",\n    \"winston\": \"^3.10.0\",\n    \"socket.io\": \"^4.7.4\",\n    \"rate-limiter-flexible\": \"^3.0.4\",\n    \"joi\": \"^17.9.2\"\n  },\n  \"devDependencies\": {\n    \"@types/express\": \"^4.17.17\",\n    \"@types/cors\": \"^2.8.13\",\n    \"@types/node\": \"^20.9.0\",\n    \"typescript\": \"^5.2.2\",\n    \"tsx\": \"^3.14.0\",\n    \"jest\": \"^29.7.0\",\n    \"supertest\": \"^6.3.3\",\n    \"eslint\": \"^8.53.0\"\n  }\n}"
  },
  "docker": {
    "Dockerfile.frontend": "FROM node:18-alpine AS base\n\n# Install dependencies only when needed\nFROM base AS deps\nRUN apk add --no-cache libc6-compat\nWORKDIR /app\n\n# Copy package files\nCOPY frontend/package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production\n\n# Rebuild the source code only when needed\nFROM base AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY frontend/ .\n\n# Build the application\nRUN npm run build\n\n# Production image, copy all the files and run next\nFROM base AS runner\nWORKDIR /app\n\nENV NODE_ENV=production\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\n\nCOPY --from=builder /app/public ./public\n\n# Set the correct permission for prerender cache\nRUN mkdir .next\nRUN chown nextjs:nodejs .next\n\n# Automatically leverage output traces to reduce image size\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static\n\nUSER nextjs\n\nEXPOSE 3000\n\nENV PORT=3000\n\n# Start the server\nCMD [\"node\", \"server.js\"]",
    "Dockerfile.backend": "FROM node:18-alpine AS base\n\nWORKDIR /app\n\n# Copy package files\nCOPY backend/package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production\n\n# Copy source code\nCOPY backend/src ./src\nCOPY backend/tsconfig.json ./\n\n# Build the application\nRUN npm run build\n\n# Production stage\nFROM node:18-alpine AS production\n\nWORKDIR /app\n\n# Copy built application\nCOPY --from=base /app/dist ./dist\nCOPY --from=base /app/node_modules ./node_modules\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nextjs -u 1001\n\nUSER nextjs\n\nEXPOSE 3001\n\nCMD [\"node\", \"dist/index.js\"]",
    "nginx.conf": "events {\n    worker_connections 1024;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    upstream frontend {\n        server frontend:3000;\n    }\n\n    upstream backend {\n        server backend:3001;\n    }\n\n    server {\n        listen 80;\n        server_name localhost;\n\n        # Frontend\n        location / {\n            proxy_pass http://frontend;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_cache_bypass $http_upgrade;\n        }\n\n        # Backend API\n        location /api/ {\n            proxy_pass http://backend;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n        # Security headers\n        add_header X-Frame-Options DENY;\n        add_header X-Content-Type-Options nosniff;\n        add_header X-XSS-Protection \"1; mode=block\";\n        add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    }\n}"
  },
  "scripts": {
    "deploy.sh": "#!/bin/bash\n\n# Avalanche ICM Dashboard Deployment Script\n\nset -e\n\necho \"🚀 Starting Avalanche ICM Dashboard deployment...\"\n\n# Check if required environment variables are set\nif [ -z \"$AVALANCHE_FUJI_RPC_URL\" ]; then\n    echo \"❌ AVALANCHE_FUJI_RPC_URL is not set\"\n    exit 1\nfi\n\nif [ -z \"$TELEPORTER_CONTRACT_ADDRESS\" ]; then\n    echo \"❌ TELEPORTER_CONTRACT_ADDRESS is not set\"\n    exit 1\nfi\n\necho \"✅ Environment variables validated\"\n\n# Build frontend\ncd frontend\necho \"📦 Building frontend...\"\nnpm run build\n\n# Build backend\ncd ../backend\necho \"📦 Building backend...\"\nnpm run build\n\n# Return to root\ndir\n\n# Deploy with Docker Compose\necho \"🐳 Starting services with Docker Compose...\"\ndocker-compose up -d --build\n\necho \"✅ Deployment completed successfully!\"\necho \"🌐 Frontend: http://localhost:3000\"\necho \"🔧 Backend API: http://localhost:3001\"\necho \"📊 ICM Dashboard is ready to use!\"",
    "setup.sh": "#!/bin/bash\n\n# Avalanche ICM Dashboard Setup Script\n\nset -e\n\necho \"🔧 Setting up Avalanche ICM Dashboard...\"\n\n# Check Node.js version\nif ! command -v node &> /dev/null; then\n    echo \"❌ Node.js is not installed. Please install Node.js 18+ first.\"\n    exit 1\nfi\n\nNODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)\nif [ \"$NODE_VERSION\" -lt 18 ]; then\n    echo \"❌ Node.js version 18+ is required. Current version: $(node -v)\"\n    exit 1\nfi\n\necho \"✅ Node.js $(node -v) detected\"\n\n# Install root dependencies\nif [ -f \"package.json\" ]; then\n    echo \"📦 Installing root dependencies...\"\n    npm install\nfi\n\n# Setup frontend\nif [ -d \"frontend\" ]; then\n    cd frontend\n    echo \"📦 Installing frontend dependencies...\"\n    npm install\n    cd ..\nfi\n\n# Setup backend\nif [ -d \"backend\" ]; then\n    cd backend\n    echo \"📦 Installing backend dependencies...\"\n    npm install\n    cd ..\nfi\n\n# Copy environment file\nif [ ! -f \".env\" ] && [ -f \".env.example\" ]; then\n    echo \"📋 Copying environment template...\"\n    cp .env.example .env\n    echo \"⚠️  Please edit .env file with your configuration\"\nfi\n\n# Create necessary directories\necho \"📁 Creating directories...\"\nmkdir -p logs\nmkdir -p data\n\n# Set executable permissions for scripts\necho \"🔧 Setting script permissions...\"\nchmod +x scripts/*.sh\n\n# Check Docker availability\nif command -v docker &> /dev/null; then\n    echo \"🐳 Docker detected - you can use 'docker-compose up' to start services\"\nelse\n    echo \"ℹ️  Docker not detected - you can still run with 'npm run dev'\"\nfi\n\necho \"\"\necho \"✅ Setup completed successfully!\"\necho \"\"\necho \"🚀 Quick start options:\"\necho \"   • Docker: docker-compose up\"\necho \"   • Manual: npm run dev\"\necho \"   • Visit: http://localhost:3000\"\necho \"\"\necho \"📚 Documentation: ./README.md\"\necho \"⚙️  Configuration: ./.env\""
  },
  "github": {
    "workflows": {
      "deploy.yml": "name: Deploy to Production\n\non:\n  push:\n    branches: [main]\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: |\n          npm install\n          cd frontend && npm install && cd ..\n          cd backend && npm install && cd ..\n\n      - name: Build frontend\n        run: cd frontend && npm run build\n\n      - name: Build backend\n        run: cd backend && npm run build\n\n      - name: Run tests\n        run: npm test\n\n      - name: Deploy to production\n        run: |\n          echo \"🚀 Deploying to production...\"\n          # Add your deployment commands here\n          # Example: Deploy to Vercel, Railway, AWS, etc.",
      "docker.yml": "name: Build and Push Docker Images\n\non:\n  push:\n    branches: [main]\n    tags: ['v*']\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Set up Docker Buildx\n        uses: actions/docker/setup-buildx-action@v3\n\n      - name: Log in to Docker Hub\n        uses: actions/docker/login-action@v3\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Extract metadata\n        id: meta\n        uses: actions/docker/metadata-action@v5\n        with:\n          images: ${{ secrets.DOCKER_USERNAME }}/avalanche-icm-dashboard\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=sha,prefix={{branch}}-\n\n      - name: Build and push frontend\n        uses: actions/docker/build-push-action@v5\n        with:\n          context: ./frontend\n          file: ./docker/Dockerfile.frontend\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}-frontend\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n\n      - name: Build and push backend\n        uses: actions/docker/build-push-action@v5\n        with:\n          context: ./backend\n          file: ./docker/Dockerfile.backend\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}-backend\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max"
    }
  }
}
